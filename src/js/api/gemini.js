import { geminiModels } from '../utils/constants.js';

/**
 * Gemini API wrapper class
 * Handles all interactions with Google's Gemini API
 */
export class GeminiAPI {
    constructor(apiKey, model = 'flash-lite') {
        this.apiKey = apiKey;
        this.model = model;
        this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models';
    }

    /**
     * Update the model being used
     */
    setModel(model) {
        this.model = model;
    }

    /**
     * Get the full API endpoint for the current model
     */
    getEndpoint() {
        const modelName = geminiModels[this.model];
        return `${this.baseUrl}/${modelName}:generateContent`;
    }

    /**
     * Make a request to the Gemini API
     */
    async makeRequest(prompt, systemPrompt = null) {
        try {
            const messages = [];
            
            if (systemPrompt) {
                messages.push({
                    role: "user",
                    parts: [{ text: systemPrompt }]
                });
                messages.push({
                    role: "model", 
                    parts: [{ text: "I understand. I'll follow these instructions carefully." }]
                });
            }
            
            messages.push({
                role: "user",
                parts: [{ text: prompt }]
            });

            const response = await fetch(`${this.getEndpoint()}?key=${this.apiKey}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: messages,
                    generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 2048
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.text();
                throw new Error(`API Error ${response.status}: ${errorData}`);
            }

            const data = await response.json();
            
            if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
                throw new Error('No content generated by API');
            }

            return data.candidates[0].content.parts[0].text.trim();
        } catch (error) {
            console.error('Gemini API Error:', error);
            throw new Error(`AI service error: ${error.message}`);
        }
    }

    /**
     * Validate API key by making a simple test request
     */
    async validateApiKey() {
        try {
            await this.makeRequest('Hello, please respond with "API key validated"');
            return { valid: true };
        } catch (error) {
            return { 
                valid: false, 
                error: error.message.includes('403') ? 'Invalid API key' : 'Connection failed'
            };
        }
    }

    /**
     * Generate a story based on parameters
     */
    async generateStory(language, level, theme, variant) {
        const systemPrompt = `You are a language learning story generator. Generate stories that strictly adhere to CEFR language proficiency levels. Your stories must be educational, engaging, and precisely calibrated to the specified difficulty level.`;
        
        const prompt = `Write a short story in ${language} STRICTLY following ${level.toUpperCase()} CEFR level requirements:

STRICT CEFR ${level.toUpperCase()} REQUIREMENTS:
- VOCABULARY: ${this.getCEFRSpec(level, 'vocabulary')}
- GRAMMAR: ${this.getCEFRSpec(level, 'grammar')} 
- SENTENCES: ${this.getCEFRSpec(level, 'sentences')}
- COMPLEXITY: ${this.getCEFRSpec(level, 'complexity')}

Story theme: ${theme} (specifically: ${variant})

Requirements:
- Length: 100-150 words for ${level.toUpperCase()}
- Use ONLY vocabulary appropriate for ${level.toUpperCase()} level
- Use ONLY grammar structures appropriate for ${level.toUpperCase()} level
- Make it engaging and culturally appropriate
- Focus on everyday, relatable situations

Generate ONLY the story text, no additional commentary.`;

        return await this.makeRequest(prompt, systemPrompt);
    }

    /**
     * Get CEFR specification for a given level and aspect
     */
    getCEFRSpec(level, aspect) {
        const specs = {
            a1: {
                vocabulary: "High frequency words (most common 1000-1500 words), basic nouns, verbs, adjectives",
                grammar: "Present tense, simple past, basic sentence structures, no subordinate clauses",
                sentences: "Very short sentences (5-8 words average), simple subject-verb-object structure",
                complexity: "Single ideas per sentence, no complex connections between ideas, concrete situations only"
            },
            a2: {
                vocabulary: "Common words (2000-2500 words), routine activities, personal information, basic emotions",
                grammar: "Present, past, future tenses, basic modal verbs (can, must, should), simple conditionals",
                sentences: "Short sentences (8-12 words), some compound sentences with 'and', 'but', 'or'",
                complexity: "Simple connections between ideas, familiar topics, basic cause and effect"
            },
            b1: {
                vocabulary: "Extended vocabulary (3000-4000 words), abstract concepts, opinions, experiences",
                grammar: "All major tenses, conditional sentences, passive voice, relative clauses",
                sentences: "Medium length sentences (12-18 words), complex sentences with subordinate clauses",
                complexity: "Clear connections between ideas, arguments, hypothetical situations, past experiences"
            },
            b2: {
                vocabulary: "Wide vocabulary (4000-6000 words), specialized terms, nuanced expressions",
                grammar: "Advanced structures, subjunctive mood, complex conditionals, advanced passive constructions", 
                sentences: "Longer sentences (15-25 words), sophisticated linking, varied sentence structures",
                complexity: "Abstract ideas, detailed arguments, implicit meanings, cultural references"
            },
            c1: {
                vocabulary: "Extensive vocabulary (6000+ words), idiomatic expressions, sophisticated terms",
                grammar: "All grammatical structures, subtle distinctions, stylistic variations",
                sentences: "Complex sentences (20+ words), sophisticated discourse markers, varied rhetorical devices",
                complexity: "Nuanced arguments, cultural subtleties, implicit meanings, sophisticated humor"
            }
        };
        
        return specs[level.toLowerCase()]?.[aspect] || '';
    }

    /**
     * Translate text and provide reference
     */
    async translateText(text, fromLang, toLang) {
        const prompt = `Translate this ${fromLang} text to ${toLang}. Provide only the translation, no explanations:

${text}`;

        return await this.makeRequest(prompt);
    }

    /**
     * Rate and provide feedback on a translation
     */
    async rateTranslation(originalText, userTranslation, referenceTranslation, fromLang, toLang) {
        const prompt = `As a language teacher, evaluate this translation:

ORIGINAL (${fromLang}): ${originalText}

STUDENT TRANSLATION (${toLang}): ${userTranslation}

REFERENCE TRANSLATION (${toLang}): ${referenceTranslation}

Provide detailed feedback in this format:
**Score: X/10**

**What you did well:**
- [positive points]

**Areas for improvement:**
- [specific issues with corrections]

**Key takeaways:**
- [important lessons]

Be encouraging but specific about errors.`;

        return await this.makeRequest(prompt);
    }

    /**
     * Generate a mini lesson based on translation errors
     */
    async generateMiniLesson(originalText, userTranslation, fromLang, toLang) {
        const prompt = `Create a focused mini-lesson based on this translation attempt:

ORIGINAL (${fromLang}): ${originalText}
STUDENT ATTEMPT (${toLang}): ${userTranslation}

Create a mini-lesson covering:
1. **Grammar Focus**: Main grammatical concepts
2. **Vocabulary**: Key words and their usage
3. **Practice**: 2-3 simple exercises

Keep it concise and practical.`;

        return await this.makeRequest(prompt);
    }

    /**
     * Handle chat/assistant conversations
     */
    async chat(message, context = null) {
        let prompt = message;
        
        if (context) {
            prompt = `Context: ${context}\n\nUser question: ${message}`;
        }

        const systemPrompt = `You are a helpful language learning assistant. Answer questions about grammar, vocabulary, translations, and language learning. Be concise but informative. Use examples when helpful.`;

        return await this.makeRequest(prompt, systemPrompt);
    }
}